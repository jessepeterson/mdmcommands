// Code generated by "admgencmd"; DO NOT EDIT.
// Sources: system.update.schedule.yaml, system.update.available.yaml, system.update.scan.yaml, system.update.status.yaml
// Options: no-shared=true
package mdmcommands

import (
	"fmt"
	"time"
)

const ScheduleOSUpdateRequestType = "ScheduleOSUpdate"

type UpdatesItem struct {
	ProductKey       *string `plist:",omitempty"`
	ProductVersion   *string `plist:",omitempty"`
	InstallAction    string  // supported values: Default, DownloadOnly, InstallASAP, NotifyOnly, InstallLater, InstallForceRestart
	MaxUserDeferrals *int    `plist:",omitempty"`
	Priority         *string `plist:",omitempty"` // supported values: Low, High
}

// ScheduleOSUpdatePayload is the "inner" command-specific payload for the "ScheduleOSUpdate" Apple MDM command.
type ScheduleOSUpdatePayload struct {
	Updates                      []UpdatesItem
	RequestType                  string // supported value: ScheduleOSUpdate
	RequestRequiresNetworkTether *bool  `plist:",omitempty"`
}

// ScheduleOSUpdateCommand is the top-level structure for the "ScheduleOSUpdate" Apple MDM command.
type ScheduleOSUpdateCommand struct {
	Command     ScheduleOSUpdatePayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c.
func (c *ScheduleOSUpdateCommand) GenericCommand() *GenericCommand {
	if c == nil {
		return nil
	}
	cmd := NewGenericCommand(c.Command.RequestType, c.CommandUUID)
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewScheduleOSUpdateCommand creates a new "ScheduleOSUpdate" Apple MDM command.
func NewScheduleOSUpdateCommand(uuid string) *ScheduleOSUpdateCommand {
	return &ScheduleOSUpdateCommand{
		Command:     ScheduleOSUpdatePayload{RequestType: ScheduleOSUpdateRequestType},
		CommandUUID: uuid,
	}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[ScheduleOSUpdateRequestType] = func(uuid string) interface{} {
		return NewScheduleOSUpdateCommand(uuid)
	}
}

type UpdateResultsItem struct {
	ProductKey    string
	InstallAction string         // supported values: Error, DownloadOnly, InstallASAP, NotifyOnly, InstallLater, InstallForceRestart
	Status        string         // supported values: Idle, Downloading, DownloadFailed, DownloadRequiresComputer, DownloadInsufficientSpace, DownloadInsufficientPower, DownloadInsufficientNetwork, Installing, InstallInsufficientSpace, InstallInsufficientPower, InstallPhoneCallInProgress, InstallFailed
	ErrorChain    *[]interface{} `plist:",omitempty"` // <any> type as single dictionary subkey
}

// ScheduleOSUpdateResponse is the command result report (response) for the "ScheduleOSUpdate" Apple MDM command.
type ScheduleOSUpdateResponse struct {
	UpdateResults []UpdateResultsItem
	GenericResponse
}

// Validate checks for any command response errors.
func (r *ScheduleOSUpdateResponse) Validate() error {
	if r.ErrorChain != nil || (r.Status != "Acknowledged" && r.Status != "Idle" && r.Status != "NotNow") {
		return fmt.Errorf("MDM error for status %s: %w", r.Status, r.ErrorChain)
	}
	return nil
}

// GetGenericResponse creates a new generic command response using the values of r.
func (r *ScheduleOSUpdateResponse) GetGenericResponse() *GenericResponse {
	return &r.GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[ScheduleOSUpdateRequestType] = func() interface{} {
		return new(ScheduleOSUpdateResponse)
	}
}

const AvailableOSUpdatesRequestType = "AvailableOSUpdates"

// AvailableOSUpdatesCommand is the top-level structure for the "AvailableOSUpdates" Apple MDM command.
type AvailableOSUpdatesCommand struct {
	Command     GenericCommandPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c.
func (c *AvailableOSUpdatesCommand) GenericCommand() *GenericCommand {
	if c == nil {
		return nil
	}
	cmd := NewGenericCommand(c.Command.RequestType, c.CommandUUID)
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewAvailableOSUpdatesCommand creates a new "AvailableOSUpdates" Apple MDM command.
func NewAvailableOSUpdatesCommand(uuid string) *AvailableOSUpdatesCommand {
	return &AvailableOSUpdatesCommand{
		Command:     GenericCommandPayload{RequestType: AvailableOSUpdatesRequestType},
		CommandUUID: uuid,
	}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[AvailableOSUpdatesRequestType] = func(uuid string) interface{} {
		return NewAvailableOSUpdatesCommand(uuid)
	}
}

type AvailableOSUpdatesItem struct {
	ProductKey                 string
	HumanReadableName          string
	HumanReadableNameLocale    string
	MetadataURL                string
	ProductName                string
	Version                    string
	Build                      string
	DownloadSize               int
	InstallSize                int
	AppIdentifiersToClose      []string
	IsCritical                 *bool      `plist:",omitempty"`
	IsConfigDataUpdate         *bool      `plist:",omitempty"`
	IsFirmwareUpdate           *bool      `plist:",omitempty"`
	IsMajorOSUpdate            *bool      `plist:",omitempty"`
	RestartRequired            *bool      `plist:",omitempty"`
	AllowsInstallLater         *bool      `plist:",omitempty"`
	DeferredUntil              *time.Time `plist:",omitempty"`
	RequiresBootstrapToken     *bool      `plist:",omitempty"`
	IsSecurityResponse         bool
	SupplementalBuildVersion   *string `plist:",omitempty"`
	SupplementalOSVersionExtra *string `plist:",omitempty"`
}

// AvailableOSUpdatesResponse is the command result report (response) for the "AvailableOSUpdates" Apple MDM command.
type AvailableOSUpdatesResponse struct {
	AvailableOSUpdates []AvailableOSUpdatesItem
	GenericResponse
}

// Validate checks for any command response errors.
func (r *AvailableOSUpdatesResponse) Validate() error {
	if r.ErrorChain != nil || (r.Status != "Acknowledged" && r.Status != "Idle" && r.Status != "NotNow") {
		return fmt.Errorf("MDM error for status %s: %w", r.Status, r.ErrorChain)
	}
	return nil
}

// GetGenericResponse creates a new generic command response using the values of r.
func (r *AvailableOSUpdatesResponse) GetGenericResponse() *GenericResponse {
	return &r.GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[AvailableOSUpdatesRequestType] = func() interface{} {
		return new(AvailableOSUpdatesResponse)
	}
}

const ScheduleOSUpdateScanRequestType = "ScheduleOSUpdateScan"

// ScheduleOSUpdateScanPayload is the "inner" command-specific payload for the "ScheduleOSUpdateScan" Apple MDM command.
type ScheduleOSUpdateScanPayload struct {
	Force                        *bool  `plist:",omitempty"`
	RequestType                  string // supported value: ScheduleOSUpdateScan
	RequestRequiresNetworkTether *bool  `plist:",omitempty"`
}

// ScheduleOSUpdateScanCommand is the top-level structure for the "ScheduleOSUpdateScan" Apple MDM command.
type ScheduleOSUpdateScanCommand struct {
	Command     ScheduleOSUpdateScanPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c.
func (c *ScheduleOSUpdateScanCommand) GenericCommand() *GenericCommand {
	if c == nil {
		return nil
	}
	cmd := NewGenericCommand(c.Command.RequestType, c.CommandUUID)
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewScheduleOSUpdateScanCommand creates a new "ScheduleOSUpdateScan" Apple MDM command.
func NewScheduleOSUpdateScanCommand(uuid string) *ScheduleOSUpdateScanCommand {
	return &ScheduleOSUpdateScanCommand{
		Command:     ScheduleOSUpdateScanPayload{RequestType: ScheduleOSUpdateScanRequestType},
		CommandUUID: uuid,
	}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[ScheduleOSUpdateScanRequestType] = func(uuid string) interface{} {
		return NewScheduleOSUpdateScanCommand(uuid)
	}
}

// ScheduleOSUpdateScanResponse is the command result report (response) for the "ScheduleOSUpdateScan" Apple MDM command.
type ScheduleOSUpdateScanResponse struct {
	ScanInitiated bool
	GenericResponse
}

// Validate checks for any command response errors.
func (r *ScheduleOSUpdateScanResponse) Validate() error {
	if r.ErrorChain != nil || (r.Status != "Acknowledged" && r.Status != "Idle" && r.Status != "NotNow") {
		return fmt.Errorf("MDM error for status %s: %w", r.Status, r.ErrorChain)
	}
	return nil
}

// GetGenericResponse creates a new generic command response using the values of r.
func (r *ScheduleOSUpdateScanResponse) GetGenericResponse() *GenericResponse {
	return &r.GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[ScheduleOSUpdateScanRequestType] = func() interface{} {
		return new(ScheduleOSUpdateScanResponse)
	}
}

const OSUpdateStatusRequestType = "OSUpdateStatus"

// OSUpdateStatusCommand is the top-level structure for the "OSUpdateStatus" Apple MDM command.
type OSUpdateStatusCommand struct {
	Command     GenericCommandPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c.
func (c *OSUpdateStatusCommand) GenericCommand() *GenericCommand {
	if c == nil {
		return nil
	}
	cmd := NewGenericCommand(c.Command.RequestType, c.CommandUUID)
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewOSUpdateStatusCommand creates a new "OSUpdateStatus" Apple MDM command.
func NewOSUpdateStatusCommand(uuid string) *OSUpdateStatusCommand {
	return &OSUpdateStatusCommand{
		Command:     GenericCommandPayload{RequestType: OSUpdateStatusRequestType},
		CommandUUID: uuid,
	}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[OSUpdateStatusRequestType] = func(uuid string) interface{} {
		return NewOSUpdateStatusCommand(uuid)
	}
}

type OSUpdateStatusItem struct {
	ProductKey              string
	IsDownloaded            bool
	DownloadPercentComplete float64
	Status                  string
	MaxDeferrals            *int         `plist:",omitempty"`
	DeferralsRemaining      *int         `plist:",omitempty"`
	NextScheduledInstall    *time.Time   `plist:",omitempty"`
	PastNotifications       *[]time.Time `plist:",omitempty"`
}

// OSUpdateStatusResponse is the command result report (response) for the "OSUpdateStatus" Apple MDM command.
type OSUpdateStatusResponse struct {
	OSUpdateStatus []OSUpdateStatusItem
	GenericResponse
}

// Validate checks for any command response errors.
func (r *OSUpdateStatusResponse) Validate() error {
	if r.ErrorChain != nil || (r.Status != "Acknowledged" && r.Status != "Idle" && r.Status != "NotNow") {
		return fmt.Errorf("MDM error for status %s: %w", r.Status, r.ErrorChain)
	}
	return nil
}

// GetGenericResponse creates a new generic command response using the values of r.
func (r *OSUpdateStatusResponse) GetGenericResponse() *GenericResponse {
	return &r.GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[OSUpdateStatusRequestType] = func() interface{} {
		return new(OSUpdateStatusResponse)
	}
}
