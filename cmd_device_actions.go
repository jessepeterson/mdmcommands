// Code generated by "admgencmd"; DO NOT EDIT.
// Sources: device.shutdown.yaml, device.restart.yaml, device.configured.yaml, mirroring.stop.yaml, mirroring.request.yaml, device.erase.yaml, device.lostmode.enable.yaml, device.lostmode.disable.yaml, device.lock.yaml
// Options: no-shared=true
package mdmcommands

const ShutDownDeviceRequestType = "ShutDownDevice"

// ShutDownDeviceCommand is the top-level structure for the "ShutDownDevice" Apple MDM command.
type ShutDownDeviceCommand struct {
	Command     GenericCommandPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *ShutDownDeviceCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewShutDownDeviceCommand creates a new "ShutDownDevice" Apple MDM command.
func NewShutDownDeviceCommand() *ShutDownDeviceCommand {
	return &ShutDownDeviceCommand{Command: GenericCommandPayload{RequestType: ShutDownDeviceRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[ShutDownDeviceRequestType] = func() interface{} {
		return NewShutDownDeviceCommand()
	}
}

type ShutDownDeviceResponse struct {
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[ShutDownDeviceRequestType] = func() interface{} {
		return new(ShutDownDeviceResponse)
	}
}

const RestartDeviceRequestType = "RestartDevice"

// RestartDevicePayload is the "inner" command-specific payload for the "RestartDevice" Apple MDM command.
type RestartDevicePayload struct {
	RebuildKernelCache           *bool     `plist:",omitempty"`
	KextPaths                    *[]string `plist:",omitempty"`
	NotifyUser                   *bool     `plist:",omitempty"`
	RequestType                  string    // must be set to "RestartDevice"
	RequestRequiresNetworkTether *bool     `plist:",omitempty"`
}

// RestartDeviceCommand is the top-level structure for the "RestartDevice" Apple MDM command.
type RestartDeviceCommand struct {
	Command     RestartDevicePayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *RestartDeviceCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewRestartDeviceCommand creates a new "RestartDevice" Apple MDM command.
func NewRestartDeviceCommand() *RestartDeviceCommand {
	return &RestartDeviceCommand{Command: RestartDevicePayload{RequestType: RestartDeviceRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[RestartDeviceRequestType] = func() interface{} {
		return NewRestartDeviceCommand()
	}
}

type RestartDeviceResponse struct {
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[RestartDeviceRequestType] = func() interface{} {
		return new(RestartDeviceResponse)
	}
}

const DeviceConfiguredRequestType = "DeviceConfigured"

// DeviceConfiguredCommand is the top-level structure for the "DeviceConfigured" Apple MDM command.
type DeviceConfiguredCommand struct {
	Command     GenericCommandPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *DeviceConfiguredCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewDeviceConfiguredCommand creates a new "DeviceConfigured" Apple MDM command.
func NewDeviceConfiguredCommand() *DeviceConfiguredCommand {
	return &DeviceConfiguredCommand{Command: GenericCommandPayload{RequestType: DeviceConfiguredRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[DeviceConfiguredRequestType] = func() interface{} {
		return NewDeviceConfiguredCommand()
	}
}

type DeviceConfiguredResponse struct {
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[DeviceConfiguredRequestType] = func() interface{} {
		return new(DeviceConfiguredResponse)
	}
}

const StopMirroringRequestType = "StopMirroring"

// StopMirroringCommand is the top-level structure for the "StopMirroring" Apple MDM command.
type StopMirroringCommand struct {
	Command     GenericCommandPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *StopMirroringCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewStopMirroringCommand creates a new "StopMirroring" Apple MDM command.
func NewStopMirroringCommand() *StopMirroringCommand {
	return &StopMirroringCommand{Command: GenericCommandPayload{RequestType: StopMirroringRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[StopMirroringRequestType] = func() interface{} {
		return NewStopMirroringCommand()
	}
}

type StopMirroringResponse struct {
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[StopMirroringRequestType] = func() interface{} {
		return new(StopMirroringResponse)
	}
}

const RequestMirroringRequestType = "RequestMirroring"

// RequestMirroringPayload is the "inner" command-specific payload for the "RequestMirroring" Apple MDM command.
type RequestMirroringPayload struct {
	DestinationName              *string `plist:",omitempty"`
	DestinationDeviceID          *string `plist:",omitempty"`
	ScanTime                     *int    `plist:",omitempty"`
	Password                     *string `plist:",omitempty"`
	RequestType                  string  // must be set to "RequestMirroring"
	RequestRequiresNetworkTether *bool   `plist:",omitempty"`
}

// RequestMirroringCommand is the top-level structure for the "RequestMirroring" Apple MDM command.
type RequestMirroringCommand struct {
	Command     RequestMirroringPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *RequestMirroringCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewRequestMirroringCommand creates a new "RequestMirroring" Apple MDM command.
func NewRequestMirroringCommand() *RequestMirroringCommand {
	return &RequestMirroringCommand{Command: RequestMirroringPayload{RequestType: RequestMirroringRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[RequestMirroringRequestType] = func() interface{} {
		return NewRequestMirroringCommand()
	}
}

type RequestMirroringResponse struct {
	MirroringResult *string `plist:",omitempty"`
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[RequestMirroringRequestType] = func() interface{} {
		return new(RequestMirroringResponse)
	}
}

const EraseDeviceRequestType = "EraseDevice"

// EraseDevicePayload is the "inner" command-specific payload for the "EraseDevice" Apple MDM command.
type EraseDevicePayload struct {
	PreserveDataPlan             *bool   `plist:",omitempty"`
	DisallowProximitySetup       *bool   `plist:",omitempty"`
	PIN                          *string `plist:",omitempty"`
	ObliterationBehavior         *string `plist:",omitempty"`
	RequestType                  string  // must be set to "EraseDevice"
	RequestRequiresNetworkTether *bool   `plist:",omitempty"`
}

// EraseDeviceCommand is the top-level structure for the "EraseDevice" Apple MDM command.
type EraseDeviceCommand struct {
	Command     EraseDevicePayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *EraseDeviceCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewEraseDeviceCommand creates a new "EraseDevice" Apple MDM command.
func NewEraseDeviceCommand() *EraseDeviceCommand {
	return &EraseDeviceCommand{Command: EraseDevicePayload{RequestType: EraseDeviceRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[EraseDeviceRequestType] = func() interface{} {
		return NewEraseDeviceCommand()
	}
}

type EraseDeviceResponse struct {
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[EraseDeviceRequestType] = func() interface{} {
		return new(EraseDeviceResponse)
	}
}

const EnableLostModeRequestType = "EnableLostMode"

// EnableLostModePayload is the "inner" command-specific payload for the "EnableLostMode" Apple MDM command.
type EnableLostModePayload struct {
	Message                      *string `plist:",omitempty"`
	PhoneNumber                  *string `plist:",omitempty"`
	Footnote                     *string `plist:",omitempty"`
	RequestType                  string  // must be set to "EnableLostMode"
	RequestRequiresNetworkTether *bool   `plist:",omitempty"`
}

// EnableLostModeCommand is the top-level structure for the "EnableLostMode" Apple MDM command.
type EnableLostModeCommand struct {
	Command     EnableLostModePayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *EnableLostModeCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewEnableLostModeCommand creates a new "EnableLostMode" Apple MDM command.
func NewEnableLostModeCommand() *EnableLostModeCommand {
	return &EnableLostModeCommand{Command: EnableLostModePayload{RequestType: EnableLostModeRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[EnableLostModeRequestType] = func() interface{} {
		return NewEnableLostModeCommand()
	}
}

type EnableLostModeResponse struct {
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[EnableLostModeRequestType] = func() interface{} {
		return new(EnableLostModeResponse)
	}
}

const DisableLostModeRequestType = "DisableLostMode"

// DisableLostModeCommand is the top-level structure for the "DisableLostMode" Apple MDM command.
type DisableLostModeCommand struct {
	Command     GenericCommandPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *DisableLostModeCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewDisableLostModeCommand creates a new "DisableLostMode" Apple MDM command.
func NewDisableLostModeCommand() *DisableLostModeCommand {
	return &DisableLostModeCommand{Command: GenericCommandPayload{RequestType: DisableLostModeRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[DisableLostModeRequestType] = func() interface{} {
		return NewDisableLostModeCommand()
	}
}

type DisableLostModeResponse struct {
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[DisableLostModeRequestType] = func() interface{} {
		return new(DisableLostModeResponse)
	}
}

const DeviceLockRequestType = "DeviceLock"

// DeviceLockPayload is the "inner" command-specific payload for the "DeviceLock" Apple MDM command.
type DeviceLockPayload struct {
	Message                      *string `plist:",omitempty"`
	PhoneNumber                  *string `plist:",omitempty"`
	PIN                          *string `plist:",omitempty"`
	RequestType                  string  // must be set to "DeviceLock"
	RequestRequiresNetworkTether *bool   `plist:",omitempty"`
}

// DeviceLockCommand is the top-level structure for the "DeviceLock" Apple MDM command.
type DeviceLockCommand struct {
	Command     DeviceLockPayload
	CommandUUID string
}

// GenericCommand creates a new generic command using the values of c
func (c *DeviceLockCommand) GenericCommand() *GenericCommand {
	cmd := NewGenericCommand(c.Command.RequestType)
	cmd.CommandUUID = c.CommandUUID
	cmd.Command.RequestRequiresNetworkTether = c.Command.RequestRequiresNetworkTether
	return cmd
}

// NewDeviceLockCommand creates a new "DeviceLock" Apple MDM command.
func NewDeviceLockCommand() *DeviceLockCommand {
	return &DeviceLockCommand{Command: DeviceLockPayload{RequestType: DeviceLockRequestType}}
}

func init() {
	// associate our Request Type to a function for creating a command of that type
	newCommandFuncs[DeviceLockRequestType] = func() interface{} {
		return NewDeviceLockCommand()
	}
}

type DeviceLockResponse struct {
	MessageResult *string `plist:",omitempty"`
	GenericResponse
}

func init() {
	// associate our Request Type to a function for creating a response of that type
	newResponseFuncs[DeviceLockRequestType] = func() interface{} {
		return new(DeviceLockResponse)
	}
}
